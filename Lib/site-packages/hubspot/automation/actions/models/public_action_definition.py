# coding: utf-8

"""
    Automation Actions V4

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v4
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from hubspot.automation.actions.configuration import Configuration


class PublicActionDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "functions": "list[PublicActionFunctionIdentifier]",
        "action_url": "str",
        "published": "bool",
        "labels": "dict[str, PublicActionLabels]",
        "input_fields": "list[InputFieldDefinition]",
        "output_fields": "list[OutputFieldDefinition]",
        "revision_id": "str",
        "archived_at": "int",
        "input_field_dependencies": "list[PublicActionDefinitionInputFieldDependenciesInner]",
        "execution_rules": "list[PublicExecutionTranslationRule]",
        "id": "str",
        "object_types": "list[str]",
        "object_request_options": "PublicObjectRequestOptions",
    }

    attribute_map = {
        "functions": "functions",
        "action_url": "actionUrl",
        "published": "published",
        "labels": "labels",
        "input_fields": "inputFields",
        "output_fields": "outputFields",
        "revision_id": "revisionId",
        "archived_at": "archivedAt",
        "input_field_dependencies": "inputFieldDependencies",
        "execution_rules": "executionRules",
        "id": "id",
        "object_types": "objectTypes",
        "object_request_options": "objectRequestOptions",
    }

    def __init__(
        self,
        functions=None,
        action_url=None,
        published=None,
        labels=None,
        input_fields=None,
        output_fields=None,
        revision_id=None,
        archived_at=None,
        input_field_dependencies=None,
        execution_rules=None,
        id=None,
        object_types=None,
        object_request_options=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """PublicActionDefinition - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._functions = None
        self._action_url = None
        self._published = None
        self._labels = None
        self._input_fields = None
        self._output_fields = None
        self._revision_id = None
        self._archived_at = None
        self._input_field_dependencies = None
        self._execution_rules = None
        self._id = None
        self._object_types = None
        self._object_request_options = None
        self.discriminator = None

        self.functions = functions
        self.action_url = action_url
        self.published = published
        self.labels = labels
        self.input_fields = input_fields
        if output_fields is not None:
            self.output_fields = output_fields
        self.revision_id = revision_id
        if archived_at is not None:
            self.archived_at = archived_at
        if input_field_dependencies is not None:
            self.input_field_dependencies = input_field_dependencies
        if execution_rules is not None:
            self.execution_rules = execution_rules
        self.id = id
        self.object_types = object_types
        if object_request_options is not None:
            self.object_request_options = object_request_options

    @property
    def functions(self):
        """Gets the functions of this PublicActionDefinition.  # noqa: E501


        :return: The functions of this PublicActionDefinition.  # noqa: E501
        :rtype: list[PublicActionFunctionIdentifier]
        """
        return self._functions

    @functions.setter
    def functions(self, functions):
        """Sets the functions of this PublicActionDefinition.


        :param functions: The functions of this PublicActionDefinition.  # noqa: E501
        :type functions: list[PublicActionFunctionIdentifier]
        """
        if self.local_vars_configuration.client_side_validation and functions is None:  # noqa: E501
            raise ValueError("Invalid value for `functions`, must not be `None`")  # noqa: E501

        self._functions = functions

    @property
    def action_url(self):
        """Gets the action_url of this PublicActionDefinition.  # noqa: E501


        :return: The action_url of this PublicActionDefinition.  # noqa: E501
        :rtype: str
        """
        return self._action_url

    @action_url.setter
    def action_url(self, action_url):
        """Sets the action_url of this PublicActionDefinition.


        :param action_url: The action_url of this PublicActionDefinition.  # noqa: E501
        :type action_url: str
        """
        if self.local_vars_configuration.client_side_validation and action_url is None:  # noqa: E501
            raise ValueError("Invalid value for `action_url`, must not be `None`")  # noqa: E501

        self._action_url = action_url

    @property
    def published(self):
        """Gets the published of this PublicActionDefinition.  # noqa: E501


        :return: The published of this PublicActionDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this PublicActionDefinition.


        :param published: The published of this PublicActionDefinition.  # noqa: E501
        :type published: bool
        """
        if self.local_vars_configuration.client_side_validation and published is None:  # noqa: E501
            raise ValueError("Invalid value for `published`, must not be `None`")  # noqa: E501

        self._published = published

    @property
    def labels(self):
        """Gets the labels of this PublicActionDefinition.  # noqa: E501


        :return: The labels of this PublicActionDefinition.  # noqa: E501
        :rtype: dict[str, PublicActionLabels]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this PublicActionDefinition.


        :param labels: The labels of this PublicActionDefinition.  # noqa: E501
        :type labels: dict[str, PublicActionLabels]
        """
        if self.local_vars_configuration.client_side_validation and labels is None:  # noqa: E501
            raise ValueError("Invalid value for `labels`, must not be `None`")  # noqa: E501

        self._labels = labels

    @property
    def input_fields(self):
        """Gets the input_fields of this PublicActionDefinition.  # noqa: E501


        :return: The input_fields of this PublicActionDefinition.  # noqa: E501
        :rtype: list[InputFieldDefinition]
        """
        return self._input_fields

    @input_fields.setter
    def input_fields(self, input_fields):
        """Sets the input_fields of this PublicActionDefinition.


        :param input_fields: The input_fields of this PublicActionDefinition.  # noqa: E501
        :type input_fields: list[InputFieldDefinition]
        """
        if self.local_vars_configuration.client_side_validation and input_fields is None:  # noqa: E501
            raise ValueError("Invalid value for `input_fields`, must not be `None`")  # noqa: E501

        self._input_fields = input_fields

    @property
    def output_fields(self):
        """Gets the output_fields of this PublicActionDefinition.  # noqa: E501


        :return: The output_fields of this PublicActionDefinition.  # noqa: E501
        :rtype: list[OutputFieldDefinition]
        """
        return self._output_fields

    @output_fields.setter
    def output_fields(self, output_fields):
        """Sets the output_fields of this PublicActionDefinition.


        :param output_fields: The output_fields of this PublicActionDefinition.  # noqa: E501
        :type output_fields: list[OutputFieldDefinition]
        """

        self._output_fields = output_fields

    @property
    def revision_id(self):
        """Gets the revision_id of this PublicActionDefinition.  # noqa: E501


        :return: The revision_id of this PublicActionDefinition.  # noqa: E501
        :rtype: str
        """
        return self._revision_id

    @revision_id.setter
    def revision_id(self, revision_id):
        """Sets the revision_id of this PublicActionDefinition.


        :param revision_id: The revision_id of this PublicActionDefinition.  # noqa: E501
        :type revision_id: str
        """
        if self.local_vars_configuration.client_side_validation and revision_id is None:  # noqa: E501
            raise ValueError("Invalid value for `revision_id`, must not be `None`")  # noqa: E501

        self._revision_id = revision_id

    @property
    def archived_at(self):
        """Gets the archived_at of this PublicActionDefinition.  # noqa: E501


        :return: The archived_at of this PublicActionDefinition.  # noqa: E501
        :rtype: int
        """
        return self._archived_at

    @archived_at.setter
    def archived_at(self, archived_at):
        """Sets the archived_at of this PublicActionDefinition.


        :param archived_at: The archived_at of this PublicActionDefinition.  # noqa: E501
        :type archived_at: int
        """

        self._archived_at = archived_at

    @property
    def input_field_dependencies(self):
        """Gets the input_field_dependencies of this PublicActionDefinition.  # noqa: E501


        :return: The input_field_dependencies of this PublicActionDefinition.  # noqa: E501
        :rtype: list[PublicActionDefinitionInputFieldDependenciesInner]
        """
        return self._input_field_dependencies

    @input_field_dependencies.setter
    def input_field_dependencies(self, input_field_dependencies):
        """Sets the input_field_dependencies of this PublicActionDefinition.


        :param input_field_dependencies: The input_field_dependencies of this PublicActionDefinition.  # noqa: E501
        :type input_field_dependencies: list[PublicActionDefinitionInputFieldDependenciesInner]
        """

        self._input_field_dependencies = input_field_dependencies

    @property
    def execution_rules(self):
        """Gets the execution_rules of this PublicActionDefinition.  # noqa: E501


        :return: The execution_rules of this PublicActionDefinition.  # noqa: E501
        :rtype: list[PublicExecutionTranslationRule]
        """
        return self._execution_rules

    @execution_rules.setter
    def execution_rules(self, execution_rules):
        """Sets the execution_rules of this PublicActionDefinition.


        :param execution_rules: The execution_rules of this PublicActionDefinition.  # noqa: E501
        :type execution_rules: list[PublicExecutionTranslationRule]
        """

        self._execution_rules = execution_rules

    @property
    def id(self):
        """Gets the id of this PublicActionDefinition.  # noqa: E501


        :return: The id of this PublicActionDefinition.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PublicActionDefinition.


        :param id: The id of this PublicActionDefinition.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def object_types(self):
        """Gets the object_types of this PublicActionDefinition.  # noqa: E501


        :return: The object_types of this PublicActionDefinition.  # noqa: E501
        :rtype: list[str]
        """
        return self._object_types

    @object_types.setter
    def object_types(self, object_types):
        """Sets the object_types of this PublicActionDefinition.


        :param object_types: The object_types of this PublicActionDefinition.  # noqa: E501
        :type object_types: list[str]
        """
        if self.local_vars_configuration.client_side_validation and object_types is None:  # noqa: E501
            raise ValueError("Invalid value for `object_types`, must not be `None`")  # noqa: E501

        self._object_types = object_types

    @property
    def object_request_options(self):
        """Gets the object_request_options of this PublicActionDefinition.  # noqa: E501


        :return: The object_request_options of this PublicActionDefinition.  # noqa: E501
        :rtype: PublicObjectRequestOptions
        """
        return self._object_request_options

    @object_request_options.setter
    def object_request_options(self, object_request_options):
        """Sets the object_request_options of this PublicActionDefinition.


        :param object_request_options: The object_request_options of this PublicActionDefinition.  # noqa: E501
        :type object_request_options: PublicObjectRequestOptions
        """

        self._object_request_options = object_request_options

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], convert(item[1])), value.items()))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicActionDefinition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PublicActionDefinition):
            return True

        return self.to_dict() != other.to_dict()
