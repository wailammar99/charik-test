# coding: utf-8

"""
    Automation Actions V4

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v4
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from hubspot.automation.actions.configuration import Configuration


class PublicActionFunction(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"function_source": "str", "function_type": "str", "id": "str"}

    attribute_map = {"function_source": "functionSource", "function_type": "functionType", "id": "id"}

    def __init__(self, function_source=None, function_type=None, id=None, local_vars_configuration=None):  # noqa: E501
        """PublicActionFunction - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._function_source = None
        self._function_type = None
        self._id = None
        self.discriminator = None

        self.function_source = function_source
        self.function_type = function_type
        if id is not None:
            self.id = id

    @property
    def function_source(self):
        """Gets the function_source of this PublicActionFunction.  # noqa: E501


        :return: The function_source of this PublicActionFunction.  # noqa: E501
        :rtype: str
        """
        return self._function_source

    @function_source.setter
    def function_source(self, function_source):
        """Sets the function_source of this PublicActionFunction.


        :param function_source: The function_source of this PublicActionFunction.  # noqa: E501
        :type function_source: str
        """
        if self.local_vars_configuration.client_side_validation and function_source is None:  # noqa: E501
            raise ValueError("Invalid value for `function_source`, must not be `None`")  # noqa: E501

        self._function_source = function_source

    @property
    def function_type(self):
        """Gets the function_type of this PublicActionFunction.  # noqa: E501


        :return: The function_type of this PublicActionFunction.  # noqa: E501
        :rtype: str
        """
        return self._function_type

    @function_type.setter
    def function_type(self, function_type):
        """Sets the function_type of this PublicActionFunction.


        :param function_type: The function_type of this PublicActionFunction.  # noqa: E501
        :type function_type: str
        """
        if self.local_vars_configuration.client_side_validation and function_type is None:  # noqa: E501
            raise ValueError("Invalid value for `function_type`, must not be `None`")  # noqa: E501
        allowed_values = ["PRE_ACTION_EXECUTION", "PRE_FETCH_OPTIONS", "POST_FETCH_OPTIONS", "POST_ACTION_EXECUTION"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and function_type not in allowed_values:  # noqa: E501
            raise ValueError("Invalid value for `function_type` ({0}), must be one of {1}".format(function_type, allowed_values))  # noqa: E501

        self._function_type = function_type

    @property
    def id(self):
        """Gets the id of this PublicActionFunction.  # noqa: E501


        :return: The id of this PublicActionFunction.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PublicActionFunction.


        :param id: The id of this PublicActionFunction.  # noqa: E501
        :type id: str
        """

        self._id = id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], convert(item[1])), value.items()))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicActionFunction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PublicActionFunction):
            return True

        return self.to_dict() != other.to_dict()
