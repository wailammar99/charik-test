# coding: utf-8

"""
    CMS Domains

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from hubspot.cms.domains.configuration import Configuration


class Domain(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "is_used_for_landing_page": "bool",
        "primary_blog_post": "bool",
        "primary_knowledge": "bool",
        "created": "datetime",
        "secondary_to_domain": "str",
        "manually_marked_as_resolving": "bool",
        "is_used_for_knowledge": "bool",
        "is_used_for_blog_post": "bool",
        "is_used_for_site_page": "bool",
        "is_resolving": "bool",
        "is_ssl_enabled": "bool",
        "is_used_for_email": "bool",
        "domain": "str",
        "primary_site_page": "bool",
        "primary_landing_page": "bool",
        "id": "str",
        "correct_cname": "str",
        "is_ssl_only": "bool",
        "updated": "datetime",
        "primary_email": "bool",
    }

    attribute_map = {
        "is_used_for_landing_page": "isUsedForLandingPage",
        "primary_blog_post": "primaryBlogPost",
        "primary_knowledge": "primaryKnowledge",
        "created": "created",
        "secondary_to_domain": "secondaryToDomain",
        "manually_marked_as_resolving": "manuallyMarkedAsResolving",
        "is_used_for_knowledge": "isUsedForKnowledge",
        "is_used_for_blog_post": "isUsedForBlogPost",
        "is_used_for_site_page": "isUsedForSitePage",
        "is_resolving": "isResolving",
        "is_ssl_enabled": "isSslEnabled",
        "is_used_for_email": "isUsedForEmail",
        "domain": "domain",
        "primary_site_page": "primarySitePage",
        "primary_landing_page": "primaryLandingPage",
        "id": "id",
        "correct_cname": "correctCname",
        "is_ssl_only": "isSslOnly",
        "updated": "updated",
        "primary_email": "primaryEmail",
    }

    def __init__(
        self,
        is_used_for_landing_page=None,
        primary_blog_post=None,
        primary_knowledge=None,
        created=None,
        secondary_to_domain=None,
        manually_marked_as_resolving=None,
        is_used_for_knowledge=None,
        is_used_for_blog_post=None,
        is_used_for_site_page=None,
        is_resolving=None,
        is_ssl_enabled=None,
        is_used_for_email=None,
        domain=None,
        primary_site_page=None,
        primary_landing_page=None,
        id=None,
        correct_cname=None,
        is_ssl_only=None,
        updated=None,
        primary_email=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """Domain - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._is_used_for_landing_page = None
        self._primary_blog_post = None
        self._primary_knowledge = None
        self._created = None
        self._secondary_to_domain = None
        self._manually_marked_as_resolving = None
        self._is_used_for_knowledge = None
        self._is_used_for_blog_post = None
        self._is_used_for_site_page = None
        self._is_resolving = None
        self._is_ssl_enabled = None
        self._is_used_for_email = None
        self._domain = None
        self._primary_site_page = None
        self._primary_landing_page = None
        self._id = None
        self._correct_cname = None
        self._is_ssl_only = None
        self._updated = None
        self._primary_email = None
        self.discriminator = None

        self.is_used_for_landing_page = is_used_for_landing_page
        if primary_blog_post is not None:
            self.primary_blog_post = primary_blog_post
        if primary_knowledge is not None:
            self.primary_knowledge = primary_knowledge
        if created is not None:
            self.created = created
        if secondary_to_domain is not None:
            self.secondary_to_domain = secondary_to_domain
        if manually_marked_as_resolving is not None:
            self.manually_marked_as_resolving = manually_marked_as_resolving
        self.is_used_for_knowledge = is_used_for_knowledge
        self.is_used_for_blog_post = is_used_for_blog_post
        self.is_used_for_site_page = is_used_for_site_page
        self.is_resolving = is_resolving
        if is_ssl_enabled is not None:
            self.is_ssl_enabled = is_ssl_enabled
        self.is_used_for_email = is_used_for_email
        self.domain = domain
        if primary_site_page is not None:
            self.primary_site_page = primary_site_page
        if primary_landing_page is not None:
            self.primary_landing_page = primary_landing_page
        self.id = id
        if correct_cname is not None:
            self.correct_cname = correct_cname
        if is_ssl_only is not None:
            self.is_ssl_only = is_ssl_only
        if updated is not None:
            self.updated = updated
        if primary_email is not None:
            self.primary_email = primary_email

    @property
    def is_used_for_landing_page(self):
        """Gets the is_used_for_landing_page of this Domain.  # noqa: E501

        Whether the domain is used for CMS landing pages.  # noqa: E501

        :return: The is_used_for_landing_page of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._is_used_for_landing_page

    @is_used_for_landing_page.setter
    def is_used_for_landing_page(self, is_used_for_landing_page):
        """Sets the is_used_for_landing_page of this Domain.

        Whether the domain is used for CMS landing pages.  # noqa: E501

        :param is_used_for_landing_page: The is_used_for_landing_page of this Domain.  # noqa: E501
        :type is_used_for_landing_page: bool
        """
        if self.local_vars_configuration.client_side_validation and is_used_for_landing_page is None:  # noqa: E501
            raise ValueError("Invalid value for `is_used_for_landing_page`, must not be `None`")  # noqa: E501

        self._is_used_for_landing_page = is_used_for_landing_page

    @property
    def primary_blog_post(self):
        """Gets the primary_blog_post of this Domain.  # noqa: E501


        :return: The primary_blog_post of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._primary_blog_post

    @primary_blog_post.setter
    def primary_blog_post(self, primary_blog_post):
        """Sets the primary_blog_post of this Domain.


        :param primary_blog_post: The primary_blog_post of this Domain.  # noqa: E501
        :type primary_blog_post: bool
        """

        self._primary_blog_post = primary_blog_post

    @property
    def primary_knowledge(self):
        """Gets the primary_knowledge of this Domain.  # noqa: E501


        :return: The primary_knowledge of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._primary_knowledge

    @primary_knowledge.setter
    def primary_knowledge(self, primary_knowledge):
        """Sets the primary_knowledge of this Domain.


        :param primary_knowledge: The primary_knowledge of this Domain.  # noqa: E501
        :type primary_knowledge: bool
        """

        self._primary_knowledge = primary_knowledge

    @property
    def created(self):
        """Gets the created of this Domain.  # noqa: E501


        :return: The created of this Domain.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Domain.


        :param created: The created of this Domain.  # noqa: E501
        :type created: datetime
        """

        self._created = created

    @property
    def secondary_to_domain(self):
        """Gets the secondary_to_domain of this Domain.  # noqa: E501


        :return: The secondary_to_domain of this Domain.  # noqa: E501
        :rtype: str
        """
        return self._secondary_to_domain

    @secondary_to_domain.setter
    def secondary_to_domain(self, secondary_to_domain):
        """Sets the secondary_to_domain of this Domain.


        :param secondary_to_domain: The secondary_to_domain of this Domain.  # noqa: E501
        :type secondary_to_domain: str
        """

        self._secondary_to_domain = secondary_to_domain

    @property
    def manually_marked_as_resolving(self):
        """Gets the manually_marked_as_resolving of this Domain.  # noqa: E501


        :return: The manually_marked_as_resolving of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._manually_marked_as_resolving

    @manually_marked_as_resolving.setter
    def manually_marked_as_resolving(self, manually_marked_as_resolving):
        """Sets the manually_marked_as_resolving of this Domain.


        :param manually_marked_as_resolving: The manually_marked_as_resolving of this Domain.  # noqa: E501
        :type manually_marked_as_resolving: bool
        """

        self._manually_marked_as_resolving = manually_marked_as_resolving

    @property
    def is_used_for_knowledge(self):
        """Gets the is_used_for_knowledge of this Domain.  # noqa: E501

        Whether the domain is used for CMS knowledge pages.  # noqa: E501

        :return: The is_used_for_knowledge of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._is_used_for_knowledge

    @is_used_for_knowledge.setter
    def is_used_for_knowledge(self, is_used_for_knowledge):
        """Sets the is_used_for_knowledge of this Domain.

        Whether the domain is used for CMS knowledge pages.  # noqa: E501

        :param is_used_for_knowledge: The is_used_for_knowledge of this Domain.  # noqa: E501
        :type is_used_for_knowledge: bool
        """
        if self.local_vars_configuration.client_side_validation and is_used_for_knowledge is None:  # noqa: E501
            raise ValueError("Invalid value for `is_used_for_knowledge`, must not be `None`")  # noqa: E501

        self._is_used_for_knowledge = is_used_for_knowledge

    @property
    def is_used_for_blog_post(self):
        """Gets the is_used_for_blog_post of this Domain.  # noqa: E501

        Whether the domain is used for CMS blog posts.  # noqa: E501

        :return: The is_used_for_blog_post of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._is_used_for_blog_post

    @is_used_for_blog_post.setter
    def is_used_for_blog_post(self, is_used_for_blog_post):
        """Sets the is_used_for_blog_post of this Domain.

        Whether the domain is used for CMS blog posts.  # noqa: E501

        :param is_used_for_blog_post: The is_used_for_blog_post of this Domain.  # noqa: E501
        :type is_used_for_blog_post: bool
        """
        if self.local_vars_configuration.client_side_validation and is_used_for_blog_post is None:  # noqa: E501
            raise ValueError("Invalid value for `is_used_for_blog_post`, must not be `None`")  # noqa: E501

        self._is_used_for_blog_post = is_used_for_blog_post

    @property
    def is_used_for_site_page(self):
        """Gets the is_used_for_site_page of this Domain.  # noqa: E501

        Whether the domain is used for CMS site pages.  # noqa: E501

        :return: The is_used_for_site_page of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._is_used_for_site_page

    @is_used_for_site_page.setter
    def is_used_for_site_page(self, is_used_for_site_page):
        """Sets the is_used_for_site_page of this Domain.

        Whether the domain is used for CMS site pages.  # noqa: E501

        :param is_used_for_site_page: The is_used_for_site_page of this Domain.  # noqa: E501
        :type is_used_for_site_page: bool
        """
        if self.local_vars_configuration.client_side_validation and is_used_for_site_page is None:  # noqa: E501
            raise ValueError("Invalid value for `is_used_for_site_page`, must not be `None`")  # noqa: E501

        self._is_used_for_site_page = is_used_for_site_page

    @property
    def is_resolving(self):
        """Gets the is_resolving of this Domain.  # noqa: E501

        Whether the DNS for this domain is optimally configured for use with HubSpot.  # noqa: E501

        :return: The is_resolving of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._is_resolving

    @is_resolving.setter
    def is_resolving(self, is_resolving):
        """Sets the is_resolving of this Domain.

        Whether the DNS for this domain is optimally configured for use with HubSpot.  # noqa: E501

        :param is_resolving: The is_resolving of this Domain.  # noqa: E501
        :type is_resolving: bool
        """
        if self.local_vars_configuration.client_side_validation and is_resolving is None:  # noqa: E501
            raise ValueError("Invalid value for `is_resolving`, must not be `None`")  # noqa: E501

        self._is_resolving = is_resolving

    @property
    def is_ssl_enabled(self):
        """Gets the is_ssl_enabled of this Domain.  # noqa: E501


        :return: The is_ssl_enabled of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._is_ssl_enabled

    @is_ssl_enabled.setter
    def is_ssl_enabled(self, is_ssl_enabled):
        """Sets the is_ssl_enabled of this Domain.


        :param is_ssl_enabled: The is_ssl_enabled of this Domain.  # noqa: E501
        :type is_ssl_enabled: bool
        """

        self._is_ssl_enabled = is_ssl_enabled

    @property
    def is_used_for_email(self):
        """Gets the is_used_for_email of this Domain.  # noqa: E501

        Whether the domain is used for CMS email web pages.  # noqa: E501

        :return: The is_used_for_email of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._is_used_for_email

    @is_used_for_email.setter
    def is_used_for_email(self, is_used_for_email):
        """Sets the is_used_for_email of this Domain.

        Whether the domain is used for CMS email web pages.  # noqa: E501

        :param is_used_for_email: The is_used_for_email of this Domain.  # noqa: E501
        :type is_used_for_email: bool
        """
        if self.local_vars_configuration.client_side_validation and is_used_for_email is None:  # noqa: E501
            raise ValueError("Invalid value for `is_used_for_email`, must not be `None`")  # noqa: E501

        self._is_used_for_email = is_used_for_email

    @property
    def domain(self):
        """Gets the domain of this Domain.  # noqa: E501

        The actual domain or sub-domain. e.g. www.hubspot.com  # noqa: E501

        :return: The domain of this Domain.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Domain.

        The actual domain or sub-domain. e.g. www.hubspot.com  # noqa: E501

        :param domain: The domain of this Domain.  # noqa: E501
        :type domain: str
        """
        if self.local_vars_configuration.client_side_validation and domain is None:  # noqa: E501
            raise ValueError("Invalid value for `domain`, must not be `None`")  # noqa: E501

        self._domain = domain

    @property
    def primary_site_page(self):
        """Gets the primary_site_page of this Domain.  # noqa: E501


        :return: The primary_site_page of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._primary_site_page

    @primary_site_page.setter
    def primary_site_page(self, primary_site_page):
        """Sets the primary_site_page of this Domain.


        :param primary_site_page: The primary_site_page of this Domain.  # noqa: E501
        :type primary_site_page: bool
        """

        self._primary_site_page = primary_site_page

    @property
    def primary_landing_page(self):
        """Gets the primary_landing_page of this Domain.  # noqa: E501


        :return: The primary_landing_page of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._primary_landing_page

    @primary_landing_page.setter
    def primary_landing_page(self, primary_landing_page):
        """Sets the primary_landing_page of this Domain.


        :param primary_landing_page: The primary_landing_page of this Domain.  # noqa: E501
        :type primary_landing_page: bool
        """

        self._primary_landing_page = primary_landing_page

    @property
    def id(self):
        """Gets the id of this Domain.  # noqa: E501

        The unique ID of this domain.  # noqa: E501

        :return: The id of this Domain.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Domain.

        The unique ID of this domain.  # noqa: E501

        :param id: The id of this Domain.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def correct_cname(self):
        """Gets the correct_cname of this Domain.  # noqa: E501


        :return: The correct_cname of this Domain.  # noqa: E501
        :rtype: str
        """
        return self._correct_cname

    @correct_cname.setter
    def correct_cname(self, correct_cname):
        """Sets the correct_cname of this Domain.


        :param correct_cname: The correct_cname of this Domain.  # noqa: E501
        :type correct_cname: str
        """

        self._correct_cname = correct_cname

    @property
    def is_ssl_only(self):
        """Gets the is_ssl_only of this Domain.  # noqa: E501


        :return: The is_ssl_only of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._is_ssl_only

    @is_ssl_only.setter
    def is_ssl_only(self, is_ssl_only):
        """Sets the is_ssl_only of this Domain.


        :param is_ssl_only: The is_ssl_only of this Domain.  # noqa: E501
        :type is_ssl_only: bool
        """

        self._is_ssl_only = is_ssl_only

    @property
    def updated(self):
        """Gets the updated of this Domain.  # noqa: E501


        :return: The updated of this Domain.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Domain.


        :param updated: The updated of this Domain.  # noqa: E501
        :type updated: datetime
        """

        self._updated = updated

    @property
    def primary_email(self):
        """Gets the primary_email of this Domain.  # noqa: E501


        :return: The primary_email of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._primary_email

    @primary_email.setter
    def primary_email(self, primary_email):
        """Sets the primary_email of this Domain.


        :param primary_email: The primary_email of this Domain.  # noqa: E501
        :type primary_email: bool
        """

        self._primary_email = primary_email

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], convert(item[1])), value.items()))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Domain):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Domain):
            return True

        return self.to_dict() != other.to_dict()
