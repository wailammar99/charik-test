# coding: utf-8

"""
    Public App Crm Cards

    Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from hubspot.crm.extensions.cards.configuration import Configuration


class IntegratorObjectResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"link_url": "str", "tokens": "list[ObjectToken]", "id": "str", "title": "str", "actions": "list[IntegratorObjectResultActionsInner]"}

    attribute_map = {"link_url": "linkUrl", "tokens": "tokens", "id": "id", "title": "title", "actions": "actions"}

    def __init__(self, link_url=None, tokens=None, id=None, title=None, actions=None, local_vars_configuration=None):  # noqa: E501
        """IntegratorObjectResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._link_url = None
        self._tokens = None
        self._id = None
        self._title = None
        self._actions = None
        self.discriminator = None

        if link_url is not None:
            self.link_url = link_url
        self.tokens = tokens
        self.id = id
        self.title = title
        self.actions = actions

    @property
    def link_url(self):
        """Gets the link_url of this IntegratorObjectResult.  # noqa: E501


        :return: The link_url of this IntegratorObjectResult.  # noqa: E501
        :rtype: str
        """
        return self._link_url

    @link_url.setter
    def link_url(self, link_url):
        """Sets the link_url of this IntegratorObjectResult.


        :param link_url: The link_url of this IntegratorObjectResult.  # noqa: E501
        :type link_url: str
        """

        self._link_url = link_url

    @property
    def tokens(self):
        """Gets the tokens of this IntegratorObjectResult.  # noqa: E501


        :return: The tokens of this IntegratorObjectResult.  # noqa: E501
        :rtype: list[ObjectToken]
        """
        return self._tokens

    @tokens.setter
    def tokens(self, tokens):
        """Sets the tokens of this IntegratorObjectResult.


        :param tokens: The tokens of this IntegratorObjectResult.  # noqa: E501
        :type tokens: list[ObjectToken]
        """
        if self.local_vars_configuration.client_side_validation and tokens is None:  # noqa: E501
            raise ValueError("Invalid value for `tokens`, must not be `None`")  # noqa: E501

        self._tokens = tokens

    @property
    def id(self):
        """Gets the id of this IntegratorObjectResult.  # noqa: E501


        :return: The id of this IntegratorObjectResult.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IntegratorObjectResult.


        :param id: The id of this IntegratorObjectResult.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def title(self):
        """Gets the title of this IntegratorObjectResult.  # noqa: E501


        :return: The title of this IntegratorObjectResult.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this IntegratorObjectResult.


        :param title: The title of this IntegratorObjectResult.  # noqa: E501
        :type title: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def actions(self):
        """Gets the actions of this IntegratorObjectResult.  # noqa: E501


        :return: The actions of this IntegratorObjectResult.  # noqa: E501
        :rtype: list[IntegratorObjectResultActionsInner]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this IntegratorObjectResult.


        :param actions: The actions of this IntegratorObjectResult.  # noqa: E501
        :type actions: list[IntegratorObjectResultActionsInner]
        """
        if self.local_vars_configuration.client_side_validation and actions is None:  # noqa: E501
            raise ValueError("Invalid value for `actions`, must not be `None`")  # noqa: E501

        self._actions = actions

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], convert(item[1])), value.items()))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntegratorObjectResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IntegratorObjectResult):
            return True

        return self.to_dict() != other.to_dict()
