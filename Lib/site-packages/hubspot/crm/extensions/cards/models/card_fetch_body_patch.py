# coding: utf-8

"""
    Public App Crm Cards

    Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from hubspot.crm.extensions.cards.configuration import Configuration


class CardFetchBodyPatch(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"serverless_function": "str", "card_type": "str", "object_types": "list[CardObjectTypeBody]", "target_url": "str"}

    attribute_map = {"serverless_function": "serverlessFunction", "card_type": "cardType", "object_types": "objectTypes", "target_url": "targetUrl"}

    def __init__(self, serverless_function=None, card_type=None, object_types=None, target_url=None, local_vars_configuration=None):  # noqa: E501
        """CardFetchBodyPatch - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._serverless_function = None
        self._card_type = None
        self._object_types = None
        self._target_url = None
        self.discriminator = None

        if serverless_function is not None:
            self.serverless_function = serverless_function
        if card_type is not None:
            self.card_type = card_type
        self.object_types = object_types
        if target_url is not None:
            self.target_url = target_url

    @property
    def serverless_function(self):
        """Gets the serverless_function of this CardFetchBodyPatch.  # noqa: E501


        :return: The serverless_function of this CardFetchBodyPatch.  # noqa: E501
        :rtype: str
        """
        return self._serverless_function

    @serverless_function.setter
    def serverless_function(self, serverless_function):
        """Sets the serverless_function of this CardFetchBodyPatch.


        :param serverless_function: The serverless_function of this CardFetchBodyPatch.  # noqa: E501
        :type serverless_function: str
        """

        self._serverless_function = serverless_function

    @property
    def card_type(self):
        """Gets the card_type of this CardFetchBodyPatch.  # noqa: E501


        :return: The card_type of this CardFetchBodyPatch.  # noqa: E501
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this CardFetchBodyPatch.


        :param card_type: The card_type of this CardFetchBodyPatch.  # noqa: E501
        :type card_type: str
        """
        allowed_values = ["EXTERNAL", "SERVERLESS"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and card_type not in allowed_values:  # noqa: E501
            raise ValueError("Invalid value for `card_type` ({0}), must be one of {1}".format(card_type, allowed_values))  # noqa: E501

        self._card_type = card_type

    @property
    def object_types(self):
        """Gets the object_types of this CardFetchBodyPatch.  # noqa: E501

        An array of CRM object types where this card should be displayed. HubSpot will call your target URL whenever a user visits a record page of the types defined here.  # noqa: E501

        :return: The object_types of this CardFetchBodyPatch.  # noqa: E501
        :rtype: list[CardObjectTypeBody]
        """
        return self._object_types

    @object_types.setter
    def object_types(self, object_types):
        """Sets the object_types of this CardFetchBodyPatch.

        An array of CRM object types where this card should be displayed. HubSpot will call your target URL whenever a user visits a record page of the types defined here.  # noqa: E501

        :param object_types: The object_types of this CardFetchBodyPatch.  # noqa: E501
        :type object_types: list[CardObjectTypeBody]
        """
        if self.local_vars_configuration.client_side_validation and object_types is None:  # noqa: E501
            raise ValueError("Invalid value for `object_types`, must not be `None`")  # noqa: E501

        self._object_types = object_types

    @property
    def target_url(self):
        """Gets the target_url of this CardFetchBodyPatch.  # noqa: E501

        URL to a service endpoint that will respond with details for this card. HubSpot will call this endpoint each time a user visits a CRM record page where this card should be displayed.  # noqa: E501

        :return: The target_url of this CardFetchBodyPatch.  # noqa: E501
        :rtype: str
        """
        return self._target_url

    @target_url.setter
    def target_url(self, target_url):
        """Sets the target_url of this CardFetchBodyPatch.

        URL to a service endpoint that will respond with details for this card. HubSpot will call this endpoint each time a user visits a CRM record page where this card should be displayed.  # noqa: E501

        :param target_url: The target_url of this CardFetchBodyPatch.  # noqa: E501
        :type target_url: str
        """

        self._target_url = target_url

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], convert(item[1])), value.items()))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CardFetchBodyPatch):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CardFetchBodyPatch):
            return True

        return self.to_dict() != other.to_dict()
