# coding: utf-8

"""
    Forms

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from hubspot.marketing.forms.configuration import Configuration


class FormStyle(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "label_text_size": "str",
        "legal_consent_text_color": "str",
        "font_family": "str",
        "legal_consent_text_size": "str",
        "background_width": "str",
        "help_text_size": "str",
        "submit_font_color": "str",
        "label_text_color": "str",
        "submit_alignment": "str",
        "submit_size": "str",
        "help_text_color": "str",
        "submit_color": "str",
    }

    attribute_map = {
        "label_text_size": "labelTextSize",
        "legal_consent_text_color": "legalConsentTextColor",
        "font_family": "fontFamily",
        "legal_consent_text_size": "legalConsentTextSize",
        "background_width": "backgroundWidth",
        "help_text_size": "helpTextSize",
        "submit_font_color": "submitFontColor",
        "label_text_color": "labelTextColor",
        "submit_alignment": "submitAlignment",
        "submit_size": "submitSize",
        "help_text_color": "helpTextColor",
        "submit_color": "submitColor",
    }

    def __init__(
        self,
        label_text_size=None,
        legal_consent_text_color=None,
        font_family=None,
        legal_consent_text_size=None,
        background_width=None,
        help_text_size=None,
        submit_font_color=None,
        label_text_color=None,
        submit_alignment=None,
        submit_size=None,
        help_text_color=None,
        submit_color=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """FormStyle - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._label_text_size = None
        self._legal_consent_text_color = None
        self._font_family = None
        self._legal_consent_text_size = None
        self._background_width = None
        self._help_text_size = None
        self._submit_font_color = None
        self._label_text_color = None
        self._submit_alignment = None
        self._submit_size = None
        self._help_text_color = None
        self._submit_color = None
        self.discriminator = None

        self.label_text_size = label_text_size
        self.legal_consent_text_color = legal_consent_text_color
        self.font_family = font_family
        self.legal_consent_text_size = legal_consent_text_size
        self.background_width = background_width
        self.help_text_size = help_text_size
        self.submit_font_color = submit_font_color
        self.label_text_color = label_text_color
        self.submit_alignment = submit_alignment
        self.submit_size = submit_size
        self.help_text_color = help_text_color
        self.submit_color = submit_color

    @property
    def label_text_size(self):
        """Gets the label_text_size of this FormStyle.  # noqa: E501

          # noqa: E501

        :return: The label_text_size of this FormStyle.  # noqa: E501
        :rtype: str
        """
        return self._label_text_size

    @label_text_size.setter
    def label_text_size(self, label_text_size):
        """Sets the label_text_size of this FormStyle.

          # noqa: E501

        :param label_text_size: The label_text_size of this FormStyle.  # noqa: E501
        :type label_text_size: str
        """
        if self.local_vars_configuration.client_side_validation and label_text_size is None:  # noqa: E501
            raise ValueError("Invalid value for `label_text_size`, must not be `None`")  # noqa: E501

        self._label_text_size = label_text_size

    @property
    def legal_consent_text_color(self):
        """Gets the legal_consent_text_color of this FormStyle.  # noqa: E501

          # noqa: E501

        :return: The legal_consent_text_color of this FormStyle.  # noqa: E501
        :rtype: str
        """
        return self._legal_consent_text_color

    @legal_consent_text_color.setter
    def legal_consent_text_color(self, legal_consent_text_color):
        """Sets the legal_consent_text_color of this FormStyle.

          # noqa: E501

        :param legal_consent_text_color: The legal_consent_text_color of this FormStyle.  # noqa: E501
        :type legal_consent_text_color: str
        """
        if self.local_vars_configuration.client_side_validation and legal_consent_text_color is None:  # noqa: E501
            raise ValueError("Invalid value for `legal_consent_text_color`, must not be `None`")  # noqa: E501

        self._legal_consent_text_color = legal_consent_text_color

    @property
    def font_family(self):
        """Gets the font_family of this FormStyle.  # noqa: E501

          # noqa: E501

        :return: The font_family of this FormStyle.  # noqa: E501
        :rtype: str
        """
        return self._font_family

    @font_family.setter
    def font_family(self, font_family):
        """Sets the font_family of this FormStyle.

          # noqa: E501

        :param font_family: The font_family of this FormStyle.  # noqa: E501
        :type font_family: str
        """
        if self.local_vars_configuration.client_side_validation and font_family is None:  # noqa: E501
            raise ValueError("Invalid value for `font_family`, must not be `None`")  # noqa: E501

        self._font_family = font_family

    @property
    def legal_consent_text_size(self):
        """Gets the legal_consent_text_size of this FormStyle.  # noqa: E501

          # noqa: E501

        :return: The legal_consent_text_size of this FormStyle.  # noqa: E501
        :rtype: str
        """
        return self._legal_consent_text_size

    @legal_consent_text_size.setter
    def legal_consent_text_size(self, legal_consent_text_size):
        """Sets the legal_consent_text_size of this FormStyle.

          # noqa: E501

        :param legal_consent_text_size: The legal_consent_text_size of this FormStyle.  # noqa: E501
        :type legal_consent_text_size: str
        """
        if self.local_vars_configuration.client_side_validation and legal_consent_text_size is None:  # noqa: E501
            raise ValueError("Invalid value for `legal_consent_text_size`, must not be `None`")  # noqa: E501

        self._legal_consent_text_size = legal_consent_text_size

    @property
    def background_width(self):
        """Gets the background_width of this FormStyle.  # noqa: E501

          # noqa: E501

        :return: The background_width of this FormStyle.  # noqa: E501
        :rtype: str
        """
        return self._background_width

    @background_width.setter
    def background_width(self, background_width):
        """Sets the background_width of this FormStyle.

          # noqa: E501

        :param background_width: The background_width of this FormStyle.  # noqa: E501
        :type background_width: str
        """
        if self.local_vars_configuration.client_side_validation and background_width is None:  # noqa: E501
            raise ValueError("Invalid value for `background_width`, must not be `None`")  # noqa: E501

        self._background_width = background_width

    @property
    def help_text_size(self):
        """Gets the help_text_size of this FormStyle.  # noqa: E501

          # noqa: E501

        :return: The help_text_size of this FormStyle.  # noqa: E501
        :rtype: str
        """
        return self._help_text_size

    @help_text_size.setter
    def help_text_size(self, help_text_size):
        """Sets the help_text_size of this FormStyle.

          # noqa: E501

        :param help_text_size: The help_text_size of this FormStyle.  # noqa: E501
        :type help_text_size: str
        """
        if self.local_vars_configuration.client_side_validation and help_text_size is None:  # noqa: E501
            raise ValueError("Invalid value for `help_text_size`, must not be `None`")  # noqa: E501

        self._help_text_size = help_text_size

    @property
    def submit_font_color(self):
        """Gets the submit_font_color of this FormStyle.  # noqa: E501

          # noqa: E501

        :return: The submit_font_color of this FormStyle.  # noqa: E501
        :rtype: str
        """
        return self._submit_font_color

    @submit_font_color.setter
    def submit_font_color(self, submit_font_color):
        """Sets the submit_font_color of this FormStyle.

          # noqa: E501

        :param submit_font_color: The submit_font_color of this FormStyle.  # noqa: E501
        :type submit_font_color: str
        """
        if self.local_vars_configuration.client_side_validation and submit_font_color is None:  # noqa: E501
            raise ValueError("Invalid value for `submit_font_color`, must not be `None`")  # noqa: E501

        self._submit_font_color = submit_font_color

    @property
    def label_text_color(self):
        """Gets the label_text_color of this FormStyle.  # noqa: E501

          # noqa: E501

        :return: The label_text_color of this FormStyle.  # noqa: E501
        :rtype: str
        """
        return self._label_text_color

    @label_text_color.setter
    def label_text_color(self, label_text_color):
        """Sets the label_text_color of this FormStyle.

          # noqa: E501

        :param label_text_color: The label_text_color of this FormStyle.  # noqa: E501
        :type label_text_color: str
        """
        if self.local_vars_configuration.client_side_validation and label_text_color is None:  # noqa: E501
            raise ValueError("Invalid value for `label_text_color`, must not be `None`")  # noqa: E501

        self._label_text_color = label_text_color

    @property
    def submit_alignment(self):
        """Gets the submit_alignment of this FormStyle.  # noqa: E501

          # noqa: E501

        :return: The submit_alignment of this FormStyle.  # noqa: E501
        :rtype: str
        """
        return self._submit_alignment

    @submit_alignment.setter
    def submit_alignment(self, submit_alignment):
        """Sets the submit_alignment of this FormStyle.

          # noqa: E501

        :param submit_alignment: The submit_alignment of this FormStyle.  # noqa: E501
        :type submit_alignment: str
        """
        if self.local_vars_configuration.client_side_validation and submit_alignment is None:  # noqa: E501
            raise ValueError("Invalid value for `submit_alignment`, must not be `None`")  # noqa: E501
        allowed_values = ["left", "right", "center"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and submit_alignment not in allowed_values:  # noqa: E501
            raise ValueError("Invalid value for `submit_alignment` ({0}), must be one of {1}".format(submit_alignment, allowed_values))  # noqa: E501

        self._submit_alignment = submit_alignment

    @property
    def submit_size(self):
        """Gets the submit_size of this FormStyle.  # noqa: E501

          # noqa: E501

        :return: The submit_size of this FormStyle.  # noqa: E501
        :rtype: str
        """
        return self._submit_size

    @submit_size.setter
    def submit_size(self, submit_size):
        """Sets the submit_size of this FormStyle.

          # noqa: E501

        :param submit_size: The submit_size of this FormStyle.  # noqa: E501
        :type submit_size: str
        """
        if self.local_vars_configuration.client_side_validation and submit_size is None:  # noqa: E501
            raise ValueError("Invalid value for `submit_size`, must not be `None`")  # noqa: E501

        self._submit_size = submit_size

    @property
    def help_text_color(self):
        """Gets the help_text_color of this FormStyle.  # noqa: E501

          # noqa: E501

        :return: The help_text_color of this FormStyle.  # noqa: E501
        :rtype: str
        """
        return self._help_text_color

    @help_text_color.setter
    def help_text_color(self, help_text_color):
        """Sets the help_text_color of this FormStyle.

          # noqa: E501

        :param help_text_color: The help_text_color of this FormStyle.  # noqa: E501
        :type help_text_color: str
        """
        if self.local_vars_configuration.client_side_validation and help_text_color is None:  # noqa: E501
            raise ValueError("Invalid value for `help_text_color`, must not be `None`")  # noqa: E501

        self._help_text_color = help_text_color

    @property
    def submit_color(self):
        """Gets the submit_color of this FormStyle.  # noqa: E501

          # noqa: E501

        :return: The submit_color of this FormStyle.  # noqa: E501
        :rtype: str
        """
        return self._submit_color

    @submit_color.setter
    def submit_color(self, submit_color):
        """Sets the submit_color of this FormStyle.

          # noqa: E501

        :param submit_color: The submit_color of this FormStyle.  # noqa: E501
        :type submit_color: str
        """
        if self.local_vars_configuration.client_side_validation and submit_color is None:  # noqa: E501
            raise ValueError("Invalid value for `submit_color`, must not be `None`")  # noqa: E501

        self._submit_color = submit_color

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], convert(item[1])), value.items()))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FormStyle):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FormStyle):
            return True

        return self.to_dict() != other.to_dict()
